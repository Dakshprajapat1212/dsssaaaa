class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (!head || k <= 1) return head;

        ListNode* temp = head;
        ListNode* prevLast = nullptr;
        ListNode* newHead = nullptr;

        while (temp) {
            ListNode* kThNode = getKthNode(temp, k);

            if (!kThNode) {
                if (prevLast) prevLast->next = temp;
                break;
            }

            ListNode* nextNode = kThNode->next;
            kThNode->next = nullptr;

            ListNode* reversedHead = reverseLinkedList(temp);

            if (!newHead) newHead = reversedHead;
            else prevLast->next = reversedHead;

            prevLast = temp;
            temp = nextNode;
        }

        return newHead ? newHead : head;
    }

private:
    ListNode* reverseLinkedList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* current = head;

        while (current) {
            ListNode* nextNode = current->next;
            current->next = prev;
            prev = current;
            current = nextNode;
        }
        return prev;
    }

    ListNode* getKthNode(ListNode* temp, int k) {
        k--;
        while (temp && k > 0) {
            temp = temp->next;
            k--;
        }
        return temp;
    }
}; // âœ… Closing bracket for Solution class
